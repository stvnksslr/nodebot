// Generated by CoffeeScript 1.4.0
(function () {
    var MucHandler, client, connection, junction, message, mucHandler, ping, util, xmppOptions, _base, _ref, request, lodash, async, ejs, ws, Watcher;

    if ((_ref = (_base = process.env).NODE_ENV) == null) {
        _base.NODE_ENV = 'dev';
    }

    util = require('util');

    junction = require('junction');

    ping = require('junction-ping');

    MucHandler = require('xmpp-muc-handler');

    Watcher = require('rss-watcher');
    ws = require('websocket').client;
    message = junction.elements.Message;
    request = require("request");
    _ = require("lodash");
    async = require("async");
    var eveonlinejs = require('eveonlinejs');
    eveonlinejs.setCache(new eveonlinejs.cache.FileCache({path: '/tmp/eveonlinejs/'}))
    ejs = eveonlinejs;

    mucHandler = new MucHandler();

    var f = function (number) {
        return (number).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }

    var calc = function (fn) {
        return new Function('return ' + fn)();
    }

    if (!process.env.XMPP_USER || !process.env.XMPP_PASSWD) {
        console.error("environment variables required: XMPP_USER, XMPP_PASSWD");
        process.exit(2);
    }

    xmppOptions = {
        type: 'client',
        jid: process.env.XMPP_USER,
        password: process.env.XMPP_PASSWD
    };

    client = junction.create();

    client.use(ping());

    client.use(junction.presenceParser());

    client.use(junction.messageParser());

    client.use(mucHandler);

    client.use(junction.serviceUnavailable());

    client.use(junction.errorHandler({
        includeStanza: true,
        showStack: true,
        dumpExceptions: true
    }));

    var trigger = "!";
    var shipTypes = [
        671,
        3764,
        11567,
        23773,
        3514,
        23913,
        23917,
        23919,
        22852
    ];

    var tmc = "https://www.themittani.com/feeds/all/rss.xml";
    var en = "http://evenews24.com/feed/";

    var commands = {};
    var registerCommand = function (command, text) {
        commands[command] = text;
    };

    var socket = new ws();


    connection = client.connect(xmppOptions).on('online', function () {
        var nick, room, rooster;
        util.log('Connected as: ' + this.jid);
        this.send(new junction.elements.Presence());
        if (!connection) {
            return console.error("Not connected");
        }
        connection.on('error', function (err) {
            return console.error(err);
        });
        mucHandler.setConnection(connection);
        room = 'omega@conference.bos.gs';
        ROOM = room;
        nick = 'SkyNet';
        connection.send(new junction.elements.Presence("" + room + "/" + nick));
        room = mucHandler.addRoom(room);
        room.on('rosterReady', function (user) {
            util.log("SelfStatus: " + JSON.stringify(user));
            roster = this.roster;
            return util.log("Roster: " + JSON.stringify(this.roster));
        });
        room.on('status', function (user) {
            util.log("Status: " + JSON.stringify(user));
            roster = this.roster;
            return util.log("Roster: " + JSON.stringify(this.roster));
        });
        room.on('joined', function (user) {
            util.log("Joined: " + JSON.stringify(user));
            roster = this.roster;
            return util.log("Roster: " + JSON.stringify(this.roster));
        });
        room.on('parted', function (data) {
            util.log("Parted: " + data.nick);
            roster = this.roster;
            return util.log("Roster: " + JSON.stringify(this.roster));
        });
        room.on('nickChange', function (data) {
            util.log("NickChange: " + data.nick + " to " + data.newNick);
            roster = this.roster;
            return util.log("Roster: " + JSON.stringify(this.roster));
        });
        room.on('subject', function (data) {
            return util.log("[" + this.roomId + "] " + data.subject + " (set by " + data.nick + ")");
        });
        room.on('privateMessage', function (data) {
            return util.log("[" + data.nick + "] " + data.text);
        });
        room.on('groupMessage', function (data) {
            var out;
            out = "<" + data.nick + "> " + data.text;
            if (data.delay) {
                out += " (sent at " + data.delay + ")";
            }
            return util.log(out);
        });

        tmcWatcher = new Watcher(tmc);
        tmcWatcher.on('new article', function (article) {
            room.sendGroup(article.title + " - " + article.link + " was posted on " + article.meta.title);
        });

        tmcWatcher.run(function (err, articles) {
            console.log(err);
        });

        enWatcher = new Watcher(en);
        enWatcher.on('new article', function (article) {
            room.sendGroup(article.title + " - " + article.link + " was posted on " + article.meta.title);
        });

        enWatcher.run(function (err, articles) {
            console.log(err);
        });

        socket.on('connect', function (c) {
            console.log("connected to eve-kill.net kill stream");
            c.on('error', function (error) {
                console.log("Connection Error: " + error.toString());
            });
            c.on('close', function () {
                setTimeout(function () {
                    socket.connect("wss://ws.eve-kill.net/kills");
                }, 1000);
            });
            c.on("message", function (data, flags) {
                if (data.type == "utf8" && data.utf8Data != "[\"ping\"]") {
//          try {
                    var kill = JSON.parse(data.utf8Data);
                    if (kill.victim.corporationID == 263585335 || _.includes(_.pluck(kill.attackers, "corporationID"), 263585335) || _.includes(shipTypes, kill.victim.shipTypeID)) {
                        async.waterfall([
                            function (next) {
                                request("https://beta.eve-kill.net/api/kills/killID/" + kill.killID, next);
                            },
                            function (res, body, next) {
                                kill = _.defaults(JSON.parse(body)[0], kill);
                                request("https://auth.bos.gs/item/" + kill.victim.shipTypeID + "?format=JSON", next);
                            },
                            function (res, body, next) {
                                kill.victim.ship = JSON.parse(body)[0];
                                next();
                            }
                        ], function (err) {
                            room.sendGroup(kill.victim.characterName + " of " + kill.victim.corporationName + " - " + kill.victim.allianceName + " was killed in a " + kill.victim.ship.typeName + " worth " + f(kill.zkb.totalValue) + " https://zkillboard.com/kill/" + kill.killID);
                        });
                    }
//          } catch (e) {}
                }
            });
        });
        socket.connect("wss://ws.eve-kill.net/kills");

        registerCommand("price", "query jita buy and sell values, supports wildcards with .* - arguments: ItemName, ItemID or Query - !price rhea");
        registerCommand("range", "get jump range - arguments: ShipType, JDC, BaseSystem  - !range Widow 5 FD-MLJ");
        registerCommand("zkb", "get characters zkb link - !zkb skynet");
        registerCommand("c", "calculate basic stuff - !c 4354*3");
        registerCommand("jew", "you know...^^");
        room.on('groupMessage', function (data) {
            var command, text;
            if (data.delay) {
                return;
            }
            text = data.text.trim();
            command = "!price ";
            if (text.substring(0, command.length) === command) {
                var search = text.substring(command.length);
                if (search == "plex") search = 29668;
                request("https://auth.bos.gs/item/" + search + "?format=JSON", function (err, res, body) {
                    try {
                        body = JSON.parse(body);
                        _.each(body, function (i) {
                            var msg = new junction.elements.Message(ROOM, "groupchat");
                            msg.c("body", {}).t(i.typeName + " (" + i.typeID + ") -- Buy avg/max:" + f(i.buy) + "/" + f(i.buy_max) + " - Sell avg/min:" + f(i.sell) + "/" + f(i.sell_min) + " in J4-4");
                            var p = msg.c('html', {xmlns: 'http://jabber.org/protocol/xhtml-im'})
                                .c("body", {xmlns: 'http://www.w3.org/1999/xhtml'})
                                .c("p", {});
                            p.t(i.typeName + " (");
                            p.c("a", {href: 'https://eve-central.com/home/quicklook.html?typeid=' + i.typeID}).t(i.typeID);
                            p.t(") -- Buy max:" + f(i.buy_max) + " - Sell min:" + f(i.sell_min) + " in J4-4");
                            ;

                            connection.send(msg);
                            //room.sendGroup(i.typeName+ " ("+i.typeID+") -- Buy:"+f(i.buy)+" - Sell:"+f(i.sell)+" in J4-4");
                        });
                    } catch (e) {
                        room.sendGroup("Error: " + e.message);
                    }
                });
                //room.sendGroup(text.substring(command.length));
                return;
            }
            command = "!zkb ";
            if (text.substring(0, command.length) === command) {
                async.waterfall([
                        function (next) {
                            ejs.fetch("eve:CharacterID", {names: text.substring(command.length)}, next);
                        },
                        function (res, next) {
                            _.each(res.characters, function (c) {
                                if (c.characterID != 0) {
                                    room.sendGroup(c.name + ": https://zkillboard.com/character/" + c.characterID);
                                } else {
                                    room.sendGroup(c.name + " is untaken");
                                }
                            });
                        }
                    ], function (err) {

                    }
                );
                return;
            }
            command = "!range ";
            if (text.substring(0, command.length) === command) {
                var args = text.split(" ");
                room.sendGroup("http://evemaps.dotlan.net/range/" + args[1] + "," + args[2] + "/" + args[3]);
                return;
            }
            command = "!c ";
            if (text.substring(0, command.length) === command) {
                room.sendGroup(f(calc(text.substring(command.length))));
                return;
            }
            command = "!jew";
            if (text.substring(0, command.length) === command) {
                room.sendGroup("Jack Heisenburg someone is looking for you");
                return;
            }
            command = "!say ";
            if (text.substring(0, command.length) === command && roster[data.nick].role == "moderator") {
                room.sendGroup(text.substring(command.length));
                return;
            }
            command = "!test";
            if (text.substring(0, command.length) === command) {
                var msg = new junction.elements.Message(ROOM, "groupchat");
                msg.c("body", {}).t("Test");
                msg.c('html', {xmlns: 'http://jabber.org/protocol/xhtml-im'})
                    .c("body", {xmlns: 'http://www.w3.org/1999/xhtml'})
                    .c("p", {})
                    .c("a", {href: 'https://eve-central.com/home/quicklook.html?typeid=29668'})
                    .t("Test");
                connection.send(msg);
                //room.sendGroup("<a href='https://eve-central.com/home/quicklook.html?typeid=29668'>Test</a>");
                return;
            }
            command = "!help";
            if (text.substring(0, command.length) === command) {
                _.each(commands, function (v, k) {
                    var msg = new junction.elements.Message(ROOM, "groupchat");
                    msg.c("body", {}).t(k + ": " + v);
                    var b = msg.c('html', {xmlns: 'http://jabber.org/protocol/xhtml-im'})
                        .c("body", {xmlns: 'http://www.w3.org/1999/xhtml'});

                    var p = b.c("p", {});
                    p.c("span", {style: "font-weight:bold"})
                        .t(trigger + k + ": ");
                    p.c("span", {})
                        .t(v);
                    connection.send(msg);
                    //room.sendGroup(k+": "+v);
                });
                return;
            }
            /*
             command = "!member ";
             if (text.substring(0, command.length) === command) {
             room.setAffiliation(text.substring(command.length), 'member');
             return;
             }
             command = "!demember ";
             if (text.substring(0, command.length) === command) {
             room.setAffiliation(text.substring(command.length), 'none');
             return;
             }
             command = "!voice ";
             if (text.substring(0, command.length) === command) {
             room.setRole(text.substring(command.length), 'participant');
             return;
             }
             command = "!devoice ";
             if (text.substring(0, command.length) === command) {
             room.setRole(text.substring(command.length), 'visitor');
             return;
             }
             command = "!kick ";
             if (text.substring(0, command.length) === command) {
             room.setRole(text.substring(command.length), 'none');
             }
             */
        });
    });

}).call(this);
